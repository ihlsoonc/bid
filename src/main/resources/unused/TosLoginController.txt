package kr.or.sports.tosresult.web;

import java.util.*;

import javax.annotation.Resource;
import javax.servlet.http.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import kr.or.sports.tosresult.common.vo.*;
import kr.or.sports.tosresult.security.UserDetailsVO;
import kr.or.sports.tosresult.service.impl.PlayerService;

@Controller
public class TosLoginController {// extends DefaultIncludeClass {

	private static final Logger LOGGER = LoggerFactory.getLogger(TosLoginController.class);

//	@Autowired
//	LoginService loginService;
	
	@Resource(name="PlayerService")
	private PlayerService playerService;
	
	/**
	 * 관리자 로그인 페이지 
	 */
	@RequestMapping(value = "/loginAdm.do")
	public String loginAdmin(ModelMap map,@ModelAttribute UserVO vo,HttpServletRequest request,	RedirectAttributes redirectAttributes) throws Exception {
		return "loginAdm";
	}
	@RequestMapping(value = "/loginFail.do")
	public String loginFail(ModelMap map,@ModelAttribute UserVO vo,HttpServletRequest request,	RedirectAttributes redirectAttributes) throws Exception {
		return "loginFail";
	}
	@RequestMapping(value = "/joinUser.do")
	public String joinUser(ModelMap map,@ModelAttribute UserVO vo,HttpServletRequest request,	RedirectAttributes redirectAttributes) throws Exception {
		return "joinUser";
	}
    @RequestMapping(value="/snsLogin.do")
    public @ResponseBody Map<String,Object> snsLogin(@RequestBody Map<String,Object> cmdMap) throws Exception{
    	Map<String,Object> result = playerService.snsUserCheck(cmdMap);
    	Map<String, Object> re = new HashMap<String, Object>();
    	if(result == null){
    		re.put("result", "2");
    		return re;
    	}else{
	        UserVO loginedUser = new UserVO();
			loginedUser.setUserId((String) result.get("USER_ID"));
			loginedUser.setPasswd((String) result.get("PASSWD"));
			loginedUser.setRole("ROLE_USER"); //여기서부터는 사용자 테이블 수정하여 적용할 것
			loginedUser.setIdExpired("N");
			loginedUser.setPwExpired("N");
			loginedUser.setLocked("N");
			loginedUser.setEnabled("Y");
	
			loginedUser.setUserNm((String) result.get("KOR_NM"));
			loginedUser.setEncPasswd((String) result.get("ENCPASSWD"));
			loginedUser.setBirthDt((String) result.get("BIRTH_DT"));
			loginedUser.setGender((String) result.get("GENDER"));
			loginedUser.setCi((String) result.get("CI"));
			loginedUser.setMobileNo((String) result.get("MOBILE_NO"));
			
			
			UserDetailsVO userDetails = new UserDetailsVO(loginedUser); //생성자에 userVO를 넣어줌
	        
	        List<String> authorities = new ArrayList<String>();
	        authorities.add(loginedUser.getRole());
	        
	        userDetails.setAuthorities(authorities); // authorities 는 생성자로 만들지 않고 set 메소드로 설정
	        Authentication newAuth = new UsernamePasswordAuthenticationToken(
			userDetails, null, userDetails.getAuthorities());
	        SecurityContextHolder.getContext().setAuthentication(newAuth);
	        userDetails.setPassword(null);
	            	
	        
	        re.put("result", "1");
	        
	    	return re;
    	}
    }
	
	@RequestMapping(value="/insertUser.do")
    public @ResponseBody Map<String,Object> insertUser(@RequestBody Map<String,Object> cmdMap) throws Exception{
        int rs = playerService.insertUserJoin(cmdMap);
        Map<String, Object> result = new HashMap<String, Object>();
        result.put("result", rs);
        return result;
    }
	
}
